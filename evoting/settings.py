"""
Django settings for evoting project.

Generated by 'django-admin startproject' using Django 3.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import sys

# Import our simple database URL parser
from .db_utils import get_database_config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'wt*)4wz$w0%fliulzn!zzn0=%#gzv!7*fm*e-lu8v=n*(m10q@')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

# Railway configuration
ALLOWED_HOSTS = ['*']  # Railway akan mengatur domain secara otomatis

if DEBUG:
    from .dev import *
else:
    from .prod import *


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'website.apps.WebsiteConfig',
]

# Add cloudinary only if properly configured
CLOUDINARY_CONFIGURED = all([
    os.environ.get('CLOUDINARY_CLOUD_NAME'),
    os.environ.get('CLOUDINARY_API_KEY'), 
    os.environ.get('CLOUDINARY_API_SECRET')
])

if CLOUDINARY_CONFIGURED:
    try:
        import cloudinary
        INSTALLED_APPS.extend(['cloudinary_storage', 'cloudinary'])
    except ImportError:
        pass

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Untuk serving static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'evoting.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "website/templates/"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.media',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'evoting.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# Database configuration with Railway support using our custom parser
print("=== Database Configuration Debug ===")

# Debug Railway environment variables
railway_env_vars = {
    'DATABASE_URL': os.environ.get('DATABASE_URL', 'Not set'),
    'PGHOST': os.environ.get('PGHOST', 'Not set'),
    'PGDATABASE': os.environ.get('PGDATABASE', 'Not set'), 
    'PGUSER': os.environ.get('PGUSER', 'Not set'),
    'RAILWAY_ENVIRONMENT': os.environ.get('RAILWAY_ENVIRONMENT', 'Not set')
}

for key, value in railway_env_vars.items():
    status = '✓' if value != 'Not set' else '✗'
    print(f"{status} {key}: {value[:20]}{'...' if len(str(value)) > 20 else ''}")

# Use our custom database configuration function
db_config = get_database_config()
DATABASES = {
    'default': db_config
}

print(f"Database ENGINE: {DATABASES['default']['ENGINE']}")
print(f"Database NAME: {DATABASES['default']['NAME']}")
print(f"Database HOST: {DATABASES['default']['HOST']}")
print(f"=== End Database Configuration Debug ===")

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'id'

TIME_ZONE = 'Asia/Jakarta'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'website/static/'),
]

# WhiteNoise static files compression - use ManifestStaticFilesStorage for better compatibility
STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

# Media files configuration
RAILWAY_ENVIRONMENT = os.environ.get('RAILWAY_ENVIRONMENT')

# Try to configure Cloudinary only if credentials are available
if RAILWAY_ENVIRONMENT == 'production' and CLOUDINARY_CONFIGURED:
    try:
        import cloudinary
        import cloudinary.uploader
        import cloudinary.api
        
        # Production: Use Cloudinary for media files
        cloudinary.config(
            cloud_name=os.environ.get('CLOUDINARY_CLOUD_NAME'),
            api_key=os.environ.get('CLOUDINARY_API_KEY'),
            api_secret=os.environ.get('CLOUDINARY_API_SECRET'),
            secure=True
        )
        
        # Use Cloudinary for media files
        DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
        MEDIA_URL = '/media/'
        print("✓ Cloudinary configured for media storage")
    except ImportError:
        # Cloudinary not installed, use local storage with base64 fallback
        MEDIA_URL = '/media/'
        MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
        print("✓ Using local storage with base64 fallback (Cloudinary not available)")
else:
    # Development or Cloudinary not configured: Use local file storage with base64 fallback
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    if RAILWAY_ENVIRONMENT == 'production':
        print("✓ Using base64 storage for Railway (Cloudinary not configured)")
    else:
        print("✓ Using local storage for development")



# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = '/adm/auth/login/'

